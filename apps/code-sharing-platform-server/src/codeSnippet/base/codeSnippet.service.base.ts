/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CodeSnippet as PrismaCodeSnippet,
  Comment as PrismaComment,
  Feedback as PrismaFeedback,
} from "@prisma/client";

export class CodeSnippetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CodeSnippetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.codeSnippet.count(args);
  }

  async codeSnippets(
    args: Prisma.CodeSnippetFindManyArgs
  ): Promise<PrismaCodeSnippet[]> {
    return this.prisma.codeSnippet.findMany(args);
  }
  async codeSnippet(
    args: Prisma.CodeSnippetFindUniqueArgs
  ): Promise<PrismaCodeSnippet | null> {
    return this.prisma.codeSnippet.findUnique(args);
  }
  async createCodeSnippet(
    args: Prisma.CodeSnippetCreateArgs
  ): Promise<PrismaCodeSnippet> {
    return this.prisma.codeSnippet.create(args);
  }
  async updateCodeSnippet(
    args: Prisma.CodeSnippetUpdateArgs
  ): Promise<PrismaCodeSnippet> {
    return this.prisma.codeSnippet.update(args);
  }
  async deleteCodeSnippet(
    args: Prisma.CodeSnippetDeleteArgs
  ): Promise<PrismaCodeSnippet> {
    return this.prisma.codeSnippet.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.codeSnippet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<PrismaFeedback[]> {
    return this.prisma.codeSnippet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbacks(args);
  }
}
